# -*- coding: utf-8 -*-
"""film recomendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/hanru789/film-recomendation.a9a6d104-19b8-4909-a34d-8196d730c544.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250430/auto/storage/goog4_request%26X-Goog-Date%3D20250430T020549Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2745bffc9764b65cf37489c06a91c989e2838b46193ce3367e837663441f359dc7248bee21730a753d13537e68c3bf55072bbd7d56d804e22309552600ba86b62b33f4d3e7e84a6e1b78fbe8a6495a4c6be5218af27baf358fba458490e6a4eebb2916aa074eb3686a43f834bc6a6632ad1ff0c17b84e7a29b59442535cd2059515e7321a4d3eb7786f254ce84bfe89b43fedc41cad9f0758ba0a8458247da1802257d902e32bd89b14a04d297737c2d6f1d9ff8d7adba6f83ff52fe160342eaddd73b33865da0ab811413fa5f042e45d201afdeb6832896e454bf9b2b6e3e18fddc46ac672c7c04803cbce0b715e710360b385619378474013c1a9560fc20a9
"""

import kagglehub
patriciabrezeanu_movielens_full_25_million_recommendation_data_path = kagglehub.dataset_download('patriciabrezeanu/movielens-full-25-million-recommendation-data')

print('Data source import complete.')
print(patriciabrezeanu_movielens_full_25_million_recommendation_data_path)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from sklearn.metrics.pairwise import cosine_similarity

movie = pd.read_csv('/root/.cache/kagglehub/datasets/patriciabrezeanu/movielens-full-25-million-recommendation-data/versions/1/ml-25m/movies.csv')

movie

movie = movie[movie.genres!='(no genres listed)']
movie = movie[:20000]

genre = movie.genres.str.replace('|', ' ', regex=False)

genre_join = ' '.join(genre)
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(genre_join)

plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Genres Word Cloud')
plt.savefig('genre_wordcloud.png', dpi=300, bbox_inches='tight')
plt.show()

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()

tf.fit(movie['genres'])

tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(movie['genres'])

tfidf_matrix.shape

tfidf_matrix.todense()[0]

movie[:100]

mat=pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=movie.title
)#.sample(22, axis=1).sample(10, axis=0)

mat[mat.crime>0]

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=movie['title'], columns=movie['title'])
print('shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

def movie_recomendations(movie_title, similarity_data=cosine_sim_df, items=movie[['title', 'genres']], k=5):

    index = similarity_data.loc[:,movie_title].to_numpy().argpartition(
        range(-1, -k, -1))
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    closest = closest.drop(movie_title, errors='ignore')
    return pd.DataFrame(closest).merge(items).head(k)

print(movie[movie.title=='Toy Story (1995)'])
movie_recomendations('Toy Story (1995)')

print(movie[movie.title=='Waiting to Exhale (1995)'])
movie_recomendations('Waiting to Exhale (1995)')